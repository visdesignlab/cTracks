import React from 'react'
import hamradio from 'hamradio'

import './TrackAdd.css'

import tracks from './utils/tracks'
import Selector from './basicComponents/Selector'
import TextButton from './basicComponents/TextButton'
import LabelLayout from './basicComponents/LabelLayout'
import TextInput from './basicComponents/TextInput'

function newTrack (row) {
  return {
    tilesets: {},
    global: true,
    focus: true,
    row
  }
}

class TrackAdd extends React.Component {
  constructor(props) {
    super(props)

    this.subscriptions = this.makeSubscriptions()

    this.state = {
      tilesets: [],
      tileset: {value: null, label:'', server: {}, tileset: {}},
      tracks: [],
      track: {value: newTrack(props.initRow), label:'*New Track*'},
      name: ''
    }
  }

  componentWillUnmount () {
    this.subscriptions.forEach(sub => sub.unsubscribe)
  }

  static getDerivedStateFromProps(nextProps, prevState) {
    const setStr = (server, tileset) => {
      let serverName = !server.name ? server.api : server.name
      let tilesetName = !tileset.name ? tileset.uuid : tileset.name
      return `${serverName}: ${tilesetName}`
    }

    return {
      tilesets: [].concat(...nextProps.tilesets.map(({server, tilesets}) => {
        return tilesets
          .filter(tileset => tileset.datatype !== 'chromsizes' )
          .map((tileset, index) => { return {
            server,
            tileset,
            label: setStr(server, tileset),
            value: index
          }})
      })),
      tracks: [{value: newTrack(nextProps.initRow), label:'*New Track*'}].concat(...Object.values(nextProps.tracks).map(track => {
        return {
          value: track,
          label: `Row ${track.row}`
        }
      }))
    }
  }

  makeSubscriptions() {
    return [
      hamradio.subscribe(
        'track/add',
        (name, data) => {
          this.setState({
            track: {value: newTrack(this.props.initRow), label:'*New Track*'},
            tileset: {value: null, label:'', server: {}, tileset: {}},
            name: ''
          })
        }
      )
    ]
  }

  done = () => {
    let tileset = this.state.tileset
    if (tileset.value !== null) {
      const uid = `${tileset.tileset.uuid}-track`
      tileset = tracks.track(
        {
          server: tileset.server.api,
          tilesetUid: tileset.tileset.uuid,
          uid,
          filetype: tileset.tileset.filetype,
          datatype: tileset.tileset.datatype
        },
        {
          name: this.state.name,
        },
        'black'
      )
      hamradio.publish(
        'track/add',
        {
          ...this.state.track.value,
          tilesets: { [uid]: tileset }
        }
      )
    }
  }

	render () {
		return (
      <div>
        <LabelLayout label="Add Tileset" inner={null}/>
        <LabelLayout label="Track"
          inner=<Selector key="select"
            value={this.state.track}
            onChange={val => this.setState({track: val})}
            options={this.state.tracks}
          />
        />
        <LabelLayout label="Tileset"
          inner= <Selector key="select"
            value={this.state.tileset}
            onChange={val => this.setState({tileset: val})}
            options={this.state.tilesets}
          />
        />
        <LabelLayout label="Name"
          inner=<TextInput value={this.state.name} update={val => this.setState({name:val})}/>
        />
        <TextButton key="icon" onClick={() => this.done()} text="Add"/>
      </div>
    )
	}
}


export default TrackAdd;
