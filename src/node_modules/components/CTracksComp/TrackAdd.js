import React from 'react'
import axios from 'axios'
import hamradio from 'hamradio'

import './TrackAdd.css'

import tracks from './utils/tracks'
import Selector from './basicComponents/Selector'
import IconButton from './basicComponents/IconButton'
import FlexRow from './basicComponents/FlexRow'

class TrackAdd extends React.Component {
  constructor(props) {
    super(props)

    this.subscriptions = this.makeSubscriptions()

    this.state = {
      tilesets: [],
      tileset: {value: null, label:'', server: {}, tileset: {}}
    }
  }

  componentWillUnmount () {
    this.subscriptions.forEach(sub => sub.unsubscribe)
  }

  makeSubscriptions() {
    return [
      hamradio.subscribe(
        'server/updated',
        (name, data) => {
          this.getTilesets()
        }
      ),
      hamradio.subscribe(
        'track/add',
        (name, data) => {
          this.setState({tileset: {value: null, label:'', server: {}, tileset: {}}})
        }
      )
    ]
  }

  componentDidMount() {
    this.getTilesets()
  }

  componentDidUpdate(prevProps, prevState, snapshot) {
    if (prevProps.servers !== this.props.servers ||
        prevProps.excludeTracks !== this.props.excludeTracks) {
      this.getTilesets()
    }
  }

  getTilesets = () => {
    let promises = this.props.servers.map(server => {
      return axios.get(`${server.api}/tilesets`)
        .then(response => {
          return {server, tilesets: response.data.results}
        })
        .catch(error => {
          console.log(error)
          return {server, tilesets:[]}
        })
    })
    Promise.all(promises).then(tilesetResults => {
      let tilesets = tilesetResults
        .map(({server, tilesets}) => {
          return tilesets
            .filter(tileset => tileset.datatype !== 'chromsizes' )
            .map((tileset, index) => { return {
              server,
              tileset,
              label: this.setStr(server, tileset),
              value: index
            }})
        })
      this.setState({
        tilesets: [].concat(...tilesets)
      })
    })
  }

  setStr = (server, tileset) => {
    let serverName = !server.name ? server.api : server.name
    let tilesetName = !tileset.name ? tileset.uuid : tileset.name
    return `${serverName}: ${tilesetName}`
  }

  done = () => {
    let tileset = this.state.tileset
    if (tileset.value !== null) {
      const uid = `${tileset.tileset.uuid}-track`
      console.log(this.props)
      hamradio.publish(
        'track/add',
        {
          tilesets: { [uid]: tracks.track({
            server: tileset.server.api,
            tilesetUid: tileset.tileset.uuid,
            name: tileset.tileset.name,
            uid,
            filetype: tileset.tileset.filetype,
            datatype: tileset.tileset.datatype
          },
          {
            summary: 'mean',
            pointColor: 'red'
          })},
          global: this.props.global || true,
          focus: this.props.focus || true,
          row: this.props.row
        }
      )
    }
  }

	render () {
		return (
      <FlexRow inner={[
        (<IconButton onClick={() => this.done()} icon="plus" backgroundColor="red" color="white" />),
        (<Selector
          value={this.state.tileset}
          onChange={val => this.setState({tileset: val})}
          options={this.state.tilesets}
        />)
      ]}/>
    )
	}
}


export default TrackAdd;
