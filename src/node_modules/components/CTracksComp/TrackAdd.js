import React from 'react'
import axios from 'axios'
import hamradio from 'hamradio'

import './TrackAdd.css'

import tracks from './utils/tracks'
import Selector from './basicComponents/Selector'

class TrackAdd extends React.Component {
  constructor(props) {
    super(props)

    this.subscriptions = this.makeSubscriptions()

    this.state = {
      tilesets: [],
      tileset: {value: null, label:'', server: {}, tileset: {}}
    }
  }

  componentWillUnmount () {
    this.subscriptions.forEach(sub => sub.unsubscribe)
  }

  makeSubscriptions() {
    return [
      hamradio.subscribe(
        'server/updated',
        (name, data) => {
          this.getTilesets()
        }
      )
    ]
  }

  componentDidMount() {
    this.getTilesets()
  }

  componentDidUpdate(prevProps, prevState, snapshot) {
    if (prevProps.servers !== this.props.servers ||
        prevProps.excludeTracks !== this.props.excludeTracks) {
      this.getTilesets()
    }
  }

  getTilesets = () => {
    let promises = this.props.servers.map(server => {
      return axios.get(`${server.api}/tilesets`)
        .then(response => {
          return {server, tilesets: response.data.results}
        })
        .catch(error => {
          console.log(error)
          return {server, tilesets:[]}
        })
    })
    Promise.all(promises).then(tilesetResults => {
      let tilesets = tilesetResults
        .map(({server, tilesets}) => {
          return tilesets
            .filter(tileset => !this.props.excludeTracks.includes(tileset.uuid) )
            .map((tileset, index) => { return {
              server,
              tileset,
              label: this.setStr(server, tileset),
              value: index
            }})
        })
      this.setState({
        tilesets: [].concat(...tilesets)
      })
    })
  }

  setStr = (server, tileset) => {
    let serverName = !server.name ? server.api : server.name
    let tilesetName = !tileset.name ? tileset.uuid : tileset.name
    return `${serverName}: ${tilesetName}`
  }

  done = () => {
    let tileset = this.state.tileset
    if (tileset.value !== null) {
      hamradio.publish(
        'track/add',
        {
          track: tracks.track({
            server: tileset.server.api,
            tilesetUid: tileset.tileset.uuid,
            name: tileset.tileset.name,
            uid: `${tileset.tileset.uuid}-track`
          }, {
            summary: 'mean'
          }),
          global: true,
          focus: true,
          order: this.props.order
        }
      )
    }
  }

	render () {
		return (
      <div>
        <button style={{marginTop: "3px"}} type="button" className="btn btn-default Button" onClick={this.done}>Add</button>
        <div style={{float: "right", minWidth: "75%"}}>
          <Selector
            value={this.state.tileset}
            onChange={val => this.setState({tileset: val})}
            options={this.state.tilesets}
          />
        </div>
      </div>
    )
	}
}


export default TrackAdd;
