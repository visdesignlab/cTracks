import React from 'react'
import hamradio from 'hamradio'

import './TrackAdd.css'

import tracks from './utils/tracks'
import Selector from './basicComponents/Selector'
import TextButton from './basicComponents/TextButton'
import LabelLayout from './basicComponents/LabelLayout'
import TextInput from './basicComponents/TextInput'

class TrackAdd extends React.Component {
  constructor(props) {
    super(props)

    this.subscriptions = this.makeSubscriptions()

    this.state = {
      tilesets: [],
      tileset: {value: null, label:'', server: {}, tileset: {}},
      row: this.props.initRow,
      name: ''
    }
  }

  componentWillUnmount () {
    this.subscriptions.forEach(sub => sub.unsubscribe)
  }

  static getDerivedStateFromProps(nextProps, prevState) {
    const setStr = (server, tileset) => {
      let serverName = !server.name ? server.api : server.name
      let tilesetName = !tileset.name ? tileset.uuid : tileset.name
      return `${serverName}: ${tilesetName}`
    }

    return {
      tilesets: [].concat(...nextProps.tilesets.map(({server, tilesets}) => {
        return tilesets
          .filter(tileset => tileset.datatype !== 'chromsizes' )
          .map((tileset, index) => { return {
            server,
            tileset,
            label: setStr(server, tileset),
            value: index
          }})
      }))
    }
  }

  makeSubscriptions() {
    return [
      hamradio.subscribe(
        'track/add',
        (name, data) => {
          this.setState({tileset: {value: null, label:'', server: {}, tileset: {}}})
        }
      )
    ]
  }

  done = () => {
    let tileset = this.state.tileset
    if (tileset.value !== null) {
      const uid = `${tileset.tileset.uuid}-track`
      hamradio.publish(
        'track/add',
        {
          tilesets: { [uid]: tracks.track({
            server: tileset.server.api,
            tilesetUid: tileset.tileset.uuid,
            uid,
            filetype: tileset.tileset.filetype,
            datatype: tileset.tileset.datatype
          },
          {
            summary: 'mean',
            pointColor: 'black',
            name: this.state.name,
          })},
          global: this.props.global || true,
          focus: this.props.focus || true,
          row: this.state.row
        }
      ).then(() => this.setState({row: this.props.initRow, name: ''}))
    }
  }

	render () {
		return (
      <div>
        <LabelLayout label="Add Track" inner={null}/>
        <LabelLayout label="Row"
          inner=<input type="number" name="resolution" min="0"
            value={this.state.row || 1} onChange={e => this.setState({row: parseInt(e.target.value)})}
          />
        />
        <LabelLayout label="Tileset"
          inner= <Selector key="select"
            value={this.state.tileset}
            onChange={val => this.setState({tileset: val})}
            options={this.state.tilesets}
          />
        />
        <LabelLayout label="Name"
          inner=<TextInput value={this.state.name} update={val => this.setState({name:val})}/>
        />
        <TextButton key="icon" onClick={() => this.done()} text="Add"/>
      </div>
    )
	}
}


export default TrackAdd;
