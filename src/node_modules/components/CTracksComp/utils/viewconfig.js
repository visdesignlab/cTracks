import tracks from './tracks'

const emptyViewConfig = {
  editable: false,
  zoomFixed: false,
  trackSourceServers: ["http://higlass.io/api/v1"],
  exportViewUrl: "http://localhost:8989/api/v1/viewconfs/",
  zoomLocks: {
    locksByViewUid: {},
    locksDict: {}
  },
  locationLocks: {
    locksByViewUid: {},
    locksDict: {}
  },
  views: []
}

const zoomChrom1 = [0, 249250621]
const zoomFullChrom = [0, 3095693981]

const genomePositionSearchBox = {
  autocompleteId: "OHJakQICQD6gTD7skx4EWA",
  autocompleteServer: "http://higlass.io/api/v1",
  chromInfoId: "b37",
  chromInfoServer: "http://higlass.io/api/v1",
  visible: true
}

function combinedTrackTemplate (row, uid) {
  return {
    type: "combined",
    uid: `${uid}-${row.row}`,
    height: 40,
    options: {},
    contents: Object.values(row.tilesets).map(tileset => (
      {
        ...tileset,
        uid: `${tileset.uid}-inner`
      }
    ))
  }
}

function globalTrackTemplate (row, uid) {
  row = combinedTrackTemplate(row, uid)
  row.contents.push({
    "uid": `${uid}-${row.row}-projection`,
    "type": "viewport-projection-horizontal",
    "fromViewUid": "demo-focus",
    "options": {
      "projectionFillColor": "#777",
      "projectionStrokeColor": "#777",
      "projectionFillOpacity": 0.3,
      "projectionStrokeOpacity": 0.3
    },
    "name": "Viewport Projection",
    "position": "top"
  })
  return row
}

function computeOverlays(tracks, features, highlights) {
  return [{
    uid: `chroms-overlay`,
    type: 'chromosome-grid',
    includes: tracks
      .map(track => track.uid)
      .filter(uid => !([
        'bpRZDog1QQuZ7DmLfsKwXw', // chromosomeAxisTrack
        'NaYcUhtrQyeQhqz9gJOjxQ'  // geneAnnotationsHG19Track
      ].includes(uid))),
    chromInfoPath: 'https://s3.amazonaws.com/pkerp/public/chromSizes.tsv',
    options: {
      lineStrokeWidth: 1,
      lineStrokeColor: 'black'
    }
  }].concat(
    Object.keys(features).map(featureset => ({
      uid: `${featureset}-overlay`,
      includes: tracks
        .map(track => track.uid)
        .filter(uid => !([
          'bpRZDog1QQuZ7DmLfsKwXw', // chromosomeAxisTrack
          'NaYcUhtrQyeQhqz9gJOjxQ'  // geneAnnotationsHG19Track
        ].includes(uid))),
      options: {
        extent: features[featureset].locations,
        fillColor: features[featureset].color
      }
    }))
  ).concat(!highlights ? [] : [
    {
      uid: `highlight-overlay`,
      includes: tracks
        .map(track => track.uid)
        .filter(uid => !([
          'bpRZDog1QQuZ7DmLfsKwXw', // chromosomeAxisTrack
          'NaYcUhtrQyeQhqz9gJOjxQ'  // geneAnnotationsHG19Track
        ].includes(uid))),
      options: {
        extent: highlights
      }
    }
  ])
}

function globalView (uid, globalTracks, features, highlights) {
  return {
    uid: `${uid}-global`,
    initialXDomain: zoomFullChrom,
    initialYDomain: zoomFullChrom,
    xDomainLimits: zoomFullChrom,
    yDomainLimits: zoomFullChrom,
    zoomLimits: [1, 1],
    genomePositionSearchBox,
    layout: {
      w: 12,
      h: 7,
      x: 0,
      y: 0,
      i: "eN9c0VphSmOaptnJ6cOTdg",
      moved: false,
      static: false
    },
    tracks: {
      top: globalTracks,
      left: [],
      center: [],
      right: [],
      bottom: []
    },
    overlays: computeOverlays(globalTracks, features, highlights)
  }
}

function focusView (uid, focusTracks, features, highlights)
{
  return {
    uid: `${uid}-focus`,
    initialXDomain: zoomChrom1,
    initialYDomain: zoomChrom1,
    genomePositionSearchBox,
    layout: {
      w: 12,
      h: 8,
      x: 0,
      y: 7,
      i: "cc",
      moved: false,
      static: false
    },
    tracks: {
      top: focusTracks,
      left: [],
      center: [],
      right: [],
      bottom: []
    },
    overlays: computeOverlays(focusTracks, features, highlights)
  }
}

function setOverlay(metaViewConfig, highlights) { // currently we assume the highlight will be on the bottom set of tracks, we can add a param later to amend that
  metaViewConfig.highlights = highlights
  return metaViewConfig
}

function sortTracks(tracksToSort) {
  return tracksToSort.sort((a, b) => a.row < b.row ? -1 : a.row > b.row ? 1 : 0)
}

function generateViewConfig(metaViewConfig) {
  let globalTracks = [
    tracks.chromosomeAxisTrack
  ].concat(
    sortTracks(Object.values(metaViewConfig.tracks))
      .filter(row => row.global)
      .map(row => globalTrackTemplate(row, metaViewConfig.uid))
  )

  let focusTracks = [
    tracks.chromosomeAxisTrack,
    tracks.geneAnnotationsHG19Track
  ].concat(
    sortTracks(Object.values(metaViewConfig.tracks))
      .filter(row => row.focus)
      .map(row => combinedTrackTemplate(row, metaViewConfig.uid))
  )

  return JSON.parse(JSON.stringify({
    ...emptyViewConfig,
    views: [
      globalView(metaViewConfig.uid, globalTracks, metaViewConfig.features, metaViewConfig.highlights),
      focusView(metaViewConfig.uid, focusTracks, metaViewConfig.features, metaViewConfig.highlights)
    ]
  }))
}

export default {
  generateViewConfig,
  setOverlay,
  sortTracks
}
