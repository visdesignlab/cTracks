import React from 'react';

// New table
import ReactTable from 'react-table';

import hamradio from 'hamradio'

import 'react-table/react-table.css';
import './CNVTable.css';

// include Higher Order Component (HOC) to React Table
// const CheckboxTable = checkboxHOC(ReactTable);

function chromStringToEnum (chrom) {
  return !isNaN(chrom)
    ? parseInt(chrom,10)
    : chrom === 'X'
      ? 23
      : chrom === 'Y'
        ? 24 : 25
}

function computeHighlights(data, viewport) {
  if (!viewport) return []
  const chromRange = viewport.map(loc => chromStringToEnum(loc[0]))

  return data.map(row => {
      return {
        chrom: chromStringToEnum(row['#chrom']),
        start: row.start,
        stop: row.stop,
        id: row._id
      }
    })
    .filter(row => {
      if (row.chrom > chromRange[0] && row.chrom < chromRange[1]) return true // strictly between beginning and end chromosomes
      if (row.chrom === chromRange[0] && row.stop > viewport[0][1]) return true // at least some overlap on the lower boundary
      if (row.chrom === chromRange[1] && row.start < viewport[1][1]) return true // at least some overlap on the upper boundary
      return false
    })
    .map(row => row.id)
}

// generate data with ID information
function GenerateTableData(inputData)
{
  if (!inputData.length) return []
  var Keys = Object.keys(inputData[0]);
  const data = inputData.map((item)=>{
    const _id = 'chr' + item[Keys[0]] + '-' + item[Keys[1]];
    return {
      _id,
      ...item,
    }
  })
  return data;
}

// generate automated column information for Table
function GenerateTableColumns(data)
{
  if (!data.length) return []
  const columns = [];
  const sample = data[0];
  Object.keys(sample).forEach((key)=>{
    if(key!=='_id')
    {
      columns.push({
        accessor: key,
        Header: key,
      })
    }
  })
  return columns;
}

class CNVTable extends React.Component {
  constructor (props) {
    super(props);
    this.state = {
      HighlightIDs: [],
      selected: null,
      TableData: [],
      TableColumns: [],
      viewport: [
        [1, 0],
        [1, 249250621]
      ]
    }
    this.subscriptions = this.makeSubscriptions()
  }

  static getDerivedStateFromProps(newProps, prevState) {
    let TableData = GenerateTableData(newProps.variants)

    return {
      HighlightIDs: computeHighlights(TableData, prevState.viewport),
      TableData,
      TableColumns: GenerateTableColumns(TableData)
    }
  }

  componentWillUnmount() {
    this.subscriptions.forEach(sub => sub.unsubscribe())
  }

  componentDidUpdate() {
  }

  makeSubscriptions () {
    return [
      hamradio.subscribe(
        'viewport/moved',
        (name, viewport) => {
          this.setState({
            viewport,
            HighlightIDs: computeHighlights(this.state.TableData, viewport)
          })
        }
      )
    ]
  }

  shouldComponentUpdate(newProps, newState) {
    if (this.state.HighlightIDs.toString() !== newState.HighlightIDs.toString()) return true
    if (this.state.selected !== newState.selected) return true
    if (this.state.TableData.toString() !== newState.TableData.toString()) return true
    return false
  }

  // function to handle row click
  handleRowClick (rowInfo) {
    if (this.state.selected !== rowInfo.viewIndex) {
      this.setState({selected: rowInfo.viewIndex})
      hamradio.publish('highlight', [[
        [rowInfo.row['#chrom'], rowInfo.row.start], [rowInfo.row['#chrom'], rowInfo.row.stop]
      ]])
    } else {
      this.setState({selected: null})
      hamradio.publish('highlight', [[]])
    }
  }

  // handle Table background info
  handleRowBackground (rowInfo) {
    var Color = null;
    const isFiltered = this.state.HighlightIDs.includes(rowInfo.original._id);
    //if (rowInfo.original._id === 'chr3-63821946') {
    if (isFiltered) {
      //Color = "rgb(182,190,254)";
      Color = '#CCCCCC';
    }
    if (rowInfo.viewIndex === this.state.selected) {
      Color = '#7676d2';
    }
    return Color;
  }

	render () {
    const { TableData, TableColumns } = this.state;

		return TableData && TableColumns && TableData.length > 0 && TableColumns.length > 0
      ? (
          <ReactTable
            data={TableData}
            columns={TableColumns}
            defaultPageSize={this.state.TableData.length}
            style={{
              height: "400px"
            }}
            className="-striped -highlight"
            showPagination={false}
            getTrProps={(state, rowInfo) => {
              const props = {
                onClick: e => {
                  return this.handleRowClick(rowInfo);
                },
                style: {
                  background: this.handleRowBackground(rowInfo, this.state.selected),
                },
              };
              return props;
            }}
          />
  		  )
      : null
	}
}


export default CNVTable;
