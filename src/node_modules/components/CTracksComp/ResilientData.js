import _ from 'lodash'
import trackUtils from './utils/tracks'

let servers = []
let tracks = {}
let variants = []
let features = {}
let tools = {
  zoom: true,
  servers: true,
  urls: true,
  tracks: false
}
let prefix = ''

export default {
  initialize (newPrefix) {
    prefix = newPrefix
    servers = JSON.parse((sessionStorage.getItem(`${prefix}/servers`))) || []
    tracks = JSON.parse((sessionStorage.getItem(`${prefix}/tracks`))) || {}
    variants = JSON.parse((sessionStorage.getItem(`${prefix}/variants`))) || []
    features = JSON.parse((sessionStorage.getItem(`${prefix}/features`))) || {}
    tools = JSON.parse((sessionStorage.getItem(`${prefix}/tools`))) || {
      zoom: true,
      servers: true,
      urls: true,
      tracks: true,
      addtracks: true,
      removetracks: true
    }
  },
  servers: {
    get: () => _.cloneDeep(servers),
    add: (server) => {
      servers.push(server)
      sessionStorage.setItem(`${prefix}/servers`, JSON.stringify(servers))
      return _.cloneDeep(servers)
    }
  },
  tracks: {
    get: () => _.cloneDeep(tracks),
    remove: (uid) => {
      if (tracks[uid]) {
        delete tracks[uid]
        sessionStorage.setItem(`${prefix}/tracks`, JSON.stringify(tracks))
      }
      return _.cloneDeep(tracks)
    },
    set: (track) => {
      if (!tracks[track.uid]) {
        tracks[track.uid] = track
      } else {
        trackUtils.merge(tracks[track.uid], track)
      }

      if (tracks[track.uid].global === null) tracks[track.uid].global = true
      if (tracks[track.uid].focus === null) tracks[track.uid].focus = true

      sessionStorage.setItem(`${prefix}/tracks`, JSON.stringify(tracks))
      return _.cloneDeep(tracks)
    }
  },
  tilesets: {
    remove: (trackUid, tilesetUid) => {
      if (tracks[trackUid] && tracks[trackUid].tilesets[tilesetUid]) {
        delete tracks[trackUid].tilesets[tilesetUid]
        sessionStorage.setItem(`${prefix}/tracks`, JSON.stringify(tracks))
      }
      return _.cloneDeep(tracks)
    },
    set: (trackUid, tileset) => {
      if (!tracks[trackUid]) {
        tracks[trackUid] = {
          global: true,
          focus: true,
          order: Math.max(0, ...Object.values(tracks).map(track => track.order))+1,
          uid: trackUid,
          tilesets: {[tileset.uid]: tileset}
        }
      } else if (!tracks[trackUid].tilesets[tileset.uid]) {
        tracks[trackUid].tilesets[tileset.uid] = tileset
      } else {
        trackUtils.merge(tracks[trackUid].tilesets[tileset.uid], tileset)
      }

      sessionStorage.setItem(`${prefix}/tracks`, JSON.stringify(tracks))
      return _.cloneDeep(tracks)
    }
  },
  variants: {
    get: () => _.cloneDeep(variants),
    set: (newVariants) => {
      variants = _.cloneDeep(newVariants)
      sessionStorage.setItem(`${prefix}/variants`, JSON.stringify(variants))
      return _.cloneDeep(variants)
    }
  },
  features: {
    get: () => _.cloneDeep(features),
    set: (featureset, newFeatures) => {
      if (features[featureset]) {
        _.mergeWith(features[featureset], newFeatures, (o, s, key) => key === 'locations' ? s : undefined)
      } else {
        features[featureset] = newFeatures
      }
      sessionStorage.setItem(`${prefix}/features`, JSON.stringify(features))
      return _.cloneDeep(features)
    }
  },
  tools: {
    get: () => _.cloneDeep(tools),
    set: (updates) => {
      _.merge(tools, updates)
      sessionStorage.setItem(`${prefix}/tools`, JSON.stringify(tools))
      return _.cloneDeep(tools)
    }
  }
}
