import _ from 'lodash'

let servers = []
let tracks = {}
let variants = []
let tools = {
  zoom: true,
  servers: true,
  urls: true,
  tracks: false
}
let prefix = ''

export default {
  initialize (newPrefix) {
    prefix = newPrefix
    servers = JSON.parse((sessionStorage.getItem(`${prefix}/servers`))) || []
    tracks = JSON.parse((sessionStorage.getItem(`${prefix}/tracks`))) || {}
    variants = JSON.parse((sessionStorage.getItem(`${prefix}/variants`))) || []
    tools = JSON.parse((sessionStorage.getItem(`${prefix}/tools`))) || {
      zoom: true,
      servers: true,
      urls: true,
      tracks: true
    }
  },
  servers: {
    get: () => _.cloneDeep(servers),
    add: (server) => {
      servers.push(server)
      sessionStorage.setItem(`${prefix}/servers`, JSON.stringify(servers))
      return _.cloneDeep(servers)
    }
  },
  tracks: {
    get: () => _.cloneDeep(tracks),
    remove: (row, uid) => {
      if (tracks[row]) {
        if (tracks[row].tilesets[uid]) {
          delete tracks[row].tilesets[uid]
        }
        if (tracks[row].tilesets.keys.lenth === 0) {
          delete tracks[row]
        }
        sessionStorage.setItem(`${prefix}/tracks`, JSON.stringify(tracks))
      }
      return _.cloneDeep(tracks)
    },
    set: (row) => {
      if (!tracks[row.row]) {
        tracks[row] = row
      } else {
        _.merge(tracks[row.row], row)
      }

      if (tracks[row.row].global === null) tracks[row].global = true
      if (tracks[row.row].focus === null) tracks[row].focus = true

      sessionStorage.setItem(`${prefix}/tracks`, JSON.stringify(tracks))
      return _.cloneDeep(tracks)
    }
  },
  variants: {
    get: () => _.cloneDeep(variants),
    set: (newVariants) => {
      variants = _.cloneDeep(newVariants)
      sessionStorage.setItem(`${prefix}/variants`, JSON.stringify(variants))
      return _.cloneDeep(variants)
    }
  },
  tools: {
    get: () => _.cloneDeep(tools),
    set: (updates) => {
      _.merge(tools, updates)
      sessionStorage.setItem(`${prefix}/tools`, JSON.stringify(tools))
      return _.cloneDeep(tools)
    }
  }
}
