import React from 'react';
import hamradio from 'hamradio'

import Selector from './basicComponents/Selector'
import LabelLayout from './basicComponents/LabelLayout'

import './ChromView.css';

const options = [
  {value: "1", label: "chr1"},
  {value: "2", label: "chr2"},
  {value: "3", label: "chr3"},
  {value: "4", label: "chr4"},
  {value: "5", label: "chr5"},
  {value: "6", label: "chr6"},
  {value: "7", label: "chr7"},
  {value: "8", label: "chr8"},
  {value: "9", label: "chr9"},
  {value: "10", label: "chr10"},
  {value: "11", label: "chr11"},
  {value: "12", label: "chr12"},
  {value: "13", label: "chr13"},
  {value: "14", label: "chr14"},
  {value: "15", label: "chr15"},
  {value: "16", label: "chr16"},
  {value: "17", label: "chr17"},
  {value: "18", label: "chr18"},
  {value: "19", label: "chr19"},
  {value: "20", label: "chr20"},
  {value: "21", label: "chr21"},
  {value: "22", label: "chr22"},
  {value: "X", label: "chrX"},
  {value: "Y", label: "chrY"},
  {value: "MT", label: "chrM"}
]

class ChromView extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
    	chromosome: {value: "1", label: "chr1"}
    };

    this.subscriptions = this.makeSubscriptions()

    this.handleChange = this.handleChange.bind(this);
  }

  componentWillUnmount() {
    this.subscriptions.forEach(sub => sub.unsubscribe())
  }

  makeSubscriptions = () => {
    return [
      hamradio.subscribe(
        'viewport/moved',
        (name, data) => {
          let index = options.findIndex(option => option.value === data[0][0])
          if (index !== -1) {
            this.setState({chromosome: options[index]})
          }
        }
      )
    ]
  }

  handleChange(newChrom) {
    if (this.props.chromInfo) {
      hamradio.publish(
        'viewport/move',
        [
          [newChrom.value, 0],
          [newChrom.value, this.props.chromInfo.chromLengths[newChrom.value]]
        ]
      )
    }

    this.setState({chromosome: newChrom});
  }

  render() {
    return (
      <LabelLayout label="Zoom to Chromosome"
        inner=<Selector
          value={this.state.chromosome}
          onChange={this.handleChange}
          options={options}
        />
      />
    );
  }
}


export default ChromView;
