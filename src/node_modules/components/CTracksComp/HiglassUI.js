import React from 'react';
import PropTypes from 'prop-types';

import { HiGlassComponent } from 'higlass';
import hamradio from 'hamradio'
import './HiglassUI.css'

import 'higlass/dist/hglib.css';

import viewconfig from './utils/viewconfig'


class HiglassUI extends React.Component {
  constructor(props) {
    super(props);
    this.api = null

    this.publishLocation = this.publishLocation.bind(this);

    let metaViewConfig = {uid: props.uid, tracks: {}, features: {}}
    this.state = {
      metaViewConfig
    }
    this.prevMeta = JSON.stringify(metaViewConfig)

    this.subscriptions = this.makeSubscriptions()
  }

  static getDerivedStateFromProps(nextProps, prevState) {
    console.log(nextProps.features)
    let metaViewConfig = prevState.metaViewConfig && prevState.metaViewConfig.uid === nextProps.uid
      ? {...prevState.metaViewConfig, tracks: nextProps.tracks, features: nextProps.features}
      : {uid: nextProps.uid, tracks: nextProps.tracks, features: nextProps.features}

    return {
      metaViewConfig
    }
  }

  shouldComponentUpdate(newProps, newState) {
    let strMetaViewConfig = JSON.stringify(newState.metaViewConfig)
    if (this.prevMeta === strMetaViewConfig) {
      return false
    }

    this.prevMeta = strMetaViewConfig
    return true
  }

  componentWillUnmount() {
    this.subscriptions.forEach(sub => sub.unsubscribe())
  }

  publishLocation (location) {
    if (this.props.chromInfo) {
      let chrome = location.xDomain
        .map(coord => this.props.chromInfo.absToChr(coord))
      hamradio.publish('viewport/moved', chrome)
    } else {
      setTimeout(this.publishLocation, 10, location)
    }
  }

  makeSubscriptions() {
    return [
      hamradio.subscribe(
        'viewport/move',
        (name, data) => {
          if (this.props.chromInfo && this.api) {
            let begin = this.props.chromInfo.chrToAbs(data[0])
            let end = this.props.chromInfo.chrToAbs(data[1])
            this.api.zoomTo(`${this.state.metaViewConfig.uid}-focus`, begin, end, begin, end, 1)
          }
        }
      ),
      hamradio.subscribe(
        'highlight',
        (name, data) => {
          if (this.props.chromInfo) {
            const highlights = data.map(bounds => bounds.map(coord => this.props.chromInfo.chrToAbs(coord)))
            this.setState({
              metaViewConfig: viewconfig.setOverlay(this.state.metaViewConfig, highlights)
            })
          }
        }
      )
    ]
  }

  initHg = (api) => {
    this.api = api;
    this.api.on('location', this.publishLocation, `${this.state.metaViewConfig.uid}-focus`);
  }

  render () {
  	return (
      <HiGlassComponent
        getApi={this.initHg}
        options={{ bounded: false }}
        viewConfig={viewconfig.generateViewConfig(this.state.metaViewConfig)}
      />
		)
  }
}

HiglassUI.propTypes = {
  uid: PropTypes.string,
}

export default HiglassUI;
