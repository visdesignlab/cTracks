import React from 'react'
import axios from 'axios'
import hamradio from 'hamradio'

import HiglassUI from './HiglassUI'
import CNVTable from './CNVTable'
import ChromView from './ChromView'
import TracksMenu from './TracksMenu'
import TrackAdd from './TrackAdd'
import ServerAdd from './ServerAdd'
import RegisterURL from './RegisterURL'
import ResilientData from './ResilientData'

import './CTracksComp.css'


class CTracksComp extends React.Component {
  constructor (props) {
    super(props);

    this.state = {
      expanded: true,
      tracks: ResilientData.tracks.get(),
      servers: ResilientData.servers.get(),
      variants: ResilientData.variants.get(),
      features: ResilientData.features.get(),
      tools: ResilientData.tools.get(),
      tilesets: []
    }
    this.subscriptions = this.makeSubscriptions()
  }

  componentWillUnmount() {
    this.subscriptions.forEach(sub => sub.unsubscribe())
  }

  componentDidMount() {
    this.getTilesets()
  }

  makeSubscriptions() {
    return [
      hamradio.subscribe(
        'track/add',
        (name, data) => {
          this.setState({tracks: ResilientData.tracks.set(data)})
        }
      ),
      hamradio.subscribe(
        'track/modify',
        (name, data) => {
          this.setState({tracks: ResilientData.tracks.set(data)})
        }
      ),
      hamradio.subscribe(
        'track/remove',
        (name, data) => {
          this.setState({
            tracks: ResilientData.tracks.remove(data.row, data.uid)
          })
        }
      ),
      hamradio.subscribe(
        'server/add',
        (name, data) => {
          this.setState({
            servers: ResilientData.servers.add(data)
          })
          this.getTilesets()
        }
      ),
      hamradio.subscribe(
        'tools',
        (name, data) => {
          this.setState({
            tools: ResilientData.tools.set(data)
          })
        }
      ),
      hamradio.subscribe(
        'variants',
        (name, data) => {
          this.setState({
            variants: ResilientData.variants.set(data)
          })
        }
      ),
      hamradio.subscribe(
        'features',
        (name, data) => {
          let feature = {...data}
          if (data.locations) {
            feature.locations = data.locations.map(bounds => bounds.map(coord => this.props.chromInfo.chrToAbs(coord)))
          }
          this.setState({
            features: ResilientData.features.set(name.split('/').splice(-1)[0], feature)
          })
        }
      ),
      hamradio.subscribe(
        'url/register',
        (name, data) => {
          if (name.search('url/register$') === -1)
            return

          axios.post(
            `${data.server}/register_url/`,
            {
              fileurl: data.url,
              name: data.name,
              uid: data.uid,
              datatype: data.datatype,
              filetype: data.filetype,
              coordSystem: data.coordSystem
            }
          ).then(response => {
            hamradio.publish('server/updated', data.server)
            hamradio.publish(`url/register/complete/${data.uid}`, null)
          }).catch(error => {
            if (error.response.status === 500 && error.response.data.error === 'UNIQUE constraint failed: tilesets_tileset.uuid') {
              hamradio.publish('server/updated', data.server)
              hamradio.publish(`url/register/complete/${data.uid}`, null)
            }
            console.log(error)
            console.log(error.response.data.error)
            hamradio.publish(`url/register/error/${data.uid}`, {error: error.response.data.error, payload: data})
          })
        }
      ),
      hamradio.subscribe(
        'server/updated',
        (name, data) => {
          this.getTilesets()
        }
      )
    ]
  }

  getTilesets = () => {
    function pagedTilesets (query, tilesets=[]) {
      return axios.get(query)
        .then(response => {
          if (response.data.next) {
            return pagedTilesets(response.data.next, tilesets.concat(response.data.results))
          }
          else {
            return tilesets.concat(response.data.results)
          }
        })
        .catch(error => {
          console.log(error)
          return []
        })
    }
    let promises = this.state.servers.map(server => {
      return pagedTilesets(`${server.api}/tilesets`)
        .then(tilesets => ({server, tilesets}))
    })
    Promise.all(promises).then(tilesetResults => {
      this.setState({
        tilesets: []
          .concat(...tilesetResults)
      })
    })
  }

  hideTools = () => {
    this.setState({expanded: false})
  }

  showTools = () => {
    this.setState({expanded: true})
  }

  render() {
    return (
      <div className = "TopContainer">

        {Object.values(this.state.tools).some(item => item) && this.state.expanded && <div className="LeftPanel">
          {this.state.tools.zoom && <div className="Box PanelBox">
            <ChromView
              chromInfo = {this.props.chromInfo}
            />
          </div>}
          {this.state.tools.tracks && <div className="Box PanelBox">
            <TracksMenu
              tracks={this.state.tracks}
              servers={this.state.servers}
              allowDeletion={this.state.tools.removetracks}
            />
          </div>}
          {this.state.tools.addtracks && <div className="Box PanelBox">
            <TrackAdd
              tilesets={this.state.tilesets}
              initRow={Math.max(0, ...Object.values(this.state.tracks).map(row => row.row))+1}
            />
          </div>}
          {this.state.tools.urls && <div className="Box PanelBox">
            <RegisterURL
              servers={this.state.servers}
              tilesets={this.state.tilesets}
            />
          </div>}
          {this.state.tools.servers && <div className="Box PanelBox">
            <ServerAdd
              servers={this.state.servers}
            />
          </div>}
        </div>}

        {Object.values(this.state.tools).some(item => item) && <div className = "Expander">
          {this.state.expanded
            ? <div className = "ExpandButton" onClick={this.hideTools}><i className="fas fa-chevron-left"/></div>
            : <div className = "ExpandButton" onClick={this.showTools}><i className="fas fa-chevron-right"/></div>
          }
        </div>}

        <div className = "RightPanel">
          <div className = "Box">
            <HiglassUI
              uid={this.props.uid}
              chromInfo={this.props.chromInfo}
              tracks={this.state.tracks}
              features={this.state.features}
            />
          </div>
          {this.state.variants.length
            ? (<div className = "Box">
                 <CNVTable
                   variants={this.state.variants}
                 />
               </div>)
            : null
          }
        </div>
      </div>
    )
  }
}

export default CTracksComp;
