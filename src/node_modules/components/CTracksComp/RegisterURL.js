import React from 'react'
import hamradio from 'hamradio'

import './RegisterURL.css'

import tracks from './utils/tracks'
import TextInput from './basicComponents/TextInput'
import LabelLayout from './basicComponents/LabelLayout'
import Selector from './basicComponents/Selector'
import TextButton from './basicComponents/TextButton'

class RegisterURL extends React.Component {
  constructor(props) {
    super(props)

    this.subscriptions = this.makeSubscriptions()

    this.state = {
      url: '',
      name: '',
      uid: '',
      server: this.props.servers.length ? this.serverElement(this.props.servers[0], 0) : {value: null, label:'', api: ''},
      datatype: {value: 'vector', label: 'vector'},
      filetype: {value: 'hitile', label: 'hitile'},
      tilesets: [],
      coordSystem: {value: '', label:'', server: {}, tileset: {}},
      error: null
    }
  }

  static getDerivedStateFromProps(nextProps, prevState) {
    const setStr = (server, tileset) => {
      let serverName = !server.name ? server.api : server.name
      return `${serverName}: ${tileset.coordSystem}`
    }

    return {
      tilesets: [].concat(...nextProps.tilesets.map(({server, tilesets}) => {
        return tilesets
          .filter(tileset => tileset.datatype === 'chromsizes' )
          .map((tileset, index) => { return {
            server,
            tileset,
            label: setStr(server, tileset),
            value: tileset.coordSystem
          }})
      }))
    }
  }

  makeSubscriptions = () => {
    return [
      hamradio.subscribe(
        'url/register/error',
        (name, data) => {
          let serverindex = this.props.servers.findIndex(server => server.api === data.payload.server)
          let server = serverindex === -1
            ? {value: null, label: data.payload.server, api: data.payload.server}
            : this.serverElement(this.props.servers[serverindex], serverindex)
          this.setState({
            url: data.payload.url,
            name: data.payload.name,
            server,
            datatype: {value: data.payload.datatype, label: data.payload.datatype},
            filetype: {value: data.payload.filetype, label: data.payload.filetype},
            error: data.error
          })
          setTimeout(this.setState.bind(this), 5000, {error: null})
        }
      )
    ]
  }

  serverElement = (server, order) => {
    return {
      label: server.name || server.api,
      value: order,
      api: server.api
    }
  }

  done = () => {
    this.setState({error: "Saving..."})
    if (this.state.server.value !== null && this.state.url !== '') {
      hamradio.publish('url/register', {
        server: this.state.server.api,
        url: this.state.url,
        name: this.state.name,
        uid: this.state.uid === '' ? null : this.state.uid,
        datatype: this.state.datatype.value,
        filetype: this.state.filetype.value,
        coordSystem: this.state.datatype.value === 'chromsizes' ? this.state.name : this.state.coordSystem.value
      }).then(() => {
        this.setState({
          url: '',
          name: '',
          uid: '',
          server: this.props.servers.length ? this.serverElement(this.props.servers[0], 0) : {value: null, label:'', api: ''},
          datatype: {value: 'vector', label: 'vector'},
          filetype: {value: 'hitile', label: 'hitile'},
          error: null
        })
      }).catch(() => {
        this.setState({error: null})
      })
    }
  }

	render () {
		return (
      <div>
        <LabelLayout label="Register URL" inner={null}/>
        <LabelLayout label="URL"
          inner=<TextInput value={this.state.url} update={val => this.setState({url:val})}/>
        />
        <LabelLayout label="Name (optional)"
          inner=<TextInput value={this.state.name} update={val => this.setState({name:val})}/>
        />
        <LabelLayout label="Unique ID (optional)"
          inner=<TextInput value={this.state.uid} update={val => this.setState({uid:val})}/>
        />
        <LabelLayout label="Registry Server"
          inner=<Selector
            value={this.state.server}
            options={this.props.servers.map((server, index) => this.serverElement(server, index))}
            onChange={val => this.setState({server: val, coordSystem: {value: '', label:'', server: {}, tileset: {}}})}
          />
        />
        <LabelLayout label="Data Type"
          inner=<Selector
            value={this.state.datatype}
            options={Object.keys(tracks.trackDataTypes).map(datatype => { return {label: datatype, value: datatype} })}
            onChange={val => this.setState({
              datatype: val,
              filetype: val.value === 'chromsizes'
                ? {label:'chromsizes_tsv', value:'chromsizes_tsv'}
                : this.state.filetype})}
          />
        />
        <LabelLayout label="File Type"
          inner=<Selector
            value={this.state.filetype}
            options={this.state.datatype.value === 'chromsizes'
              ? [{label: 'chromsizes_tsv', value: 'chromsizes_tsv'}]
              : tracks.fileTypes.map(filetype => { return {label: filetype, value: filetype} })}
            onChange={val => this.setState({filetype: val})}
          />
        />
        {this.state.datatype.value !== 'chromsizes'
          ? <LabelLayout label="Chromosome Sizes"
              inner=<Selector
                value={this.state.coordSystem}
                options={[{value: '', label:'', server: {}, tileset: {}}].concat(this.state.tilesets.filter(tileset => tileset.server.api === this.state.server.api))}
                onChange={val => this.setState({coordSystem: val})}
              />
            />
          : <LabelLayout label="Chromosome Sizes"
              inner=<TextInput value={this.state.name} update={val => this.setState({name:val})}/>
            />
        }
        {this.state.error
          ? <label className="WarningLabel">Failed to register url: {this.state.error}</label>
          : <TextButton onClick={this.done} text="Register" />
        }
      </div>
    )
	}
}


export default RegisterURL;
