import React from 'react'
import hamradio from 'hamradio'
import {CompactPicker} from 'react-color'

import CheckBox from './CheckBox'
import TrackAdd from './TrackAdd'
import LabelLayout from './basicComponents/LabelLayout'
import Selector from './basicComponents/Selector'

import './TracksMenu.css'


class TracksMenu extends React.Component {
  constructor (props) {
    super(props);

    this.toggleCheckBoxGlobal = this.toggleCheckBoxGlobal.bind(this);
    this.toggleCheckBoxFocus = this.toggleCheckBoxFocus.bind(this);
    this.createCheckBox = this.createCheckBox.bind(this);
    this.createCheckBoxes = this.createCheckBoxes.bind(this);

    this.subscriptions = this.makeSubscriptions()

    this.state = {
      editTrack: null
    }
	}

  componentWillUnmount() {
    this.subscriptions.forEach(sub => sub.unsubscribe())
  }

  makeSubscriptions() {
    return [
      hamradio.subscribe(
        'track/modify',
        (name, track) => {
          if (track.track.uid === this.state.editTrack.track.uid) {
            this.setState({editTrack: track})
          }
        }
      ),
      hamradio.subscribe(
        'track/remove',
        (name, track) => {
          if (track.track.uid === this.state.editTrack.track.uid) {
            this.setState({editTrack: null})
          }
        }
      )
    ]
  }

  toggleCheckBoxGlobal (name) {
    for (var i = 0; i < this.props.tracks.length; i++) {
      if (this.props.tracks[i].track.name === name) {
        let track = {
          ...this.props.tracks[i],
          global: !this.props.tracks[i].global
        }
        hamradio.publish('track/modify', track)
        break;
      }
    }
  }

  toggleCheckBoxFocus (name) {
    for (var i = 0; i < this.props.tracks.length; i++) {
      if (this.props.tracks[i].track.name === name) {
        let track = {
          ...this.props.tracks[i],
          focus: !this.props.tracks[i].focus
        }
        hamradio.publish('track/modify', track)
        break;
      }
    }
  }

  editTrack = (track) => {
    this.setState({
      editTrack: track
    })
  }

  createCheckBox (track, index) {
    var KeyGlobal = track.track.name + '_globalView';
    var KeyFocus = track.track.name + '_focusView';
    return <tr key={index}>
      <td>
        <CheckBox className="CheckBox"
          label={track.track.name}
          InitialState={track.global}
          handleCheckBoxChange={this.toggleCheckBoxGlobal}
          key={KeyGlobal}
        />
      </td>
      <td>
        <CheckBox className="CheckBox"
          label={track.track.name}
          InitialState={track.focus}
          handleCheckBoxChange={this.toggleCheckBoxFocus}
          key={KeyFocus}
        />
      </td>
      <td>
        <label className="CheckBoxLabel">{track.track.name}</label>
      </td>
      <td>
        <button className="btn btn-default Button" onClick={() => this.editTrack(track)}>edit</button>
      </td>
    </tr>
  }

  createCheckBoxes () {
  	return this.props.tracks.length ? (<table>
      <tbody>
        <tr>
          <td><label className="CheckBoxTitle">Global</label></td>
          <td><label className="CheckBoxTitle">Focus</label></td>
          <td><label className="CheckBoxTitle">Track name</label></td>
          <td><label className="CheckBoxTitle"></label></td>
        </tr>
        {this.props.tracks.map(this.createCheckBox)}
      </tbody>
    </table>) : null
  }

  setTrackValue = (key, value) => {
    hamradio.publish('track/modify', {
      ...this.props.track,
      track: {
        ...this.props.track.track,
        [key]: value
      }
    })
  }

  setOptionValue = (option, value) => {
    hamradio.publish('track/modify', {
      ...this.state.editTrack,
      track: {
        ...this.state.editTrack.track,
        options: {
          ...this.state.editTrack.track.options,
          [option]: value
        }
      }
    })
  }

  pointColorChange = (color) => {
    this.setOptionValue('pointColor', color.hex)
  }

  summaryChange = (item) => {
    this.setOptionValue('summary', item.value)
  }

	render () {
		return !this.state.editTrack ? (
      <div>
  			<label>Tracks</label>
        {this.createCheckBoxes()}
        <TrackAdd
          servers={this.props.servers}
          row={this.props.tracks.length}
        />
      </div>
		) : (
      <div>
  			<label>Higlass - Edit Track</label>
        <div>
          <ul>
            <li>{this.state.editTrack.track.server}</li>
            <li>{this.state.editTrack.track.name}</li>
          </ul>
          <label>Point Color</label>
          <LabelLayout label="Summary Statistic"
            inner=<div>
              <Selector
                value={{value: this.state.editTrack.track.options.summary, label: this.state.editTrack.track.options.summary}}
                onChange={this.summaryChange}
                options={[
                  {value: 'mean', label: 'mean'},
                  {value: 'max', label: 'max'},
                  {value: 'min', label: 'min'},
                ]}
              />
            </div>
          />
          <div className="ColorPicker">
            <CompactPicker color={this.state.editTrack.track.options.pointColor} onChange={this.pointColorChange}/>
          </div>
          <br/>
          <button type="button" className="btn btn-default Button" onClick={() => this.editTrack(null)}>Done</button>
        </div>
      </div>
    )
	}
}


export default TracksMenu;
