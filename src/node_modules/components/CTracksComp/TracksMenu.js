import React from 'react'
import hamradio from 'hamradio'
import {CompactPicker} from 'react-color'
import _ from 'lodash'

import TrackAdd from './TrackAdd'
import LabelLayout from './basicComponents/LabelLayout'
import Selector from './basicComponents/Selector'
import IconButton from './basicComponents/IconButton'
import TextButton from './basicComponents/TextButton'

import viewconfig from './utils/viewconfig'

import './TracksMenu.css'


class TracksMenu extends React.Component {
  constructor (props) {
    super(props);

    this.subscriptions = this.makeSubscriptions()

    this.state = {
      editTrack: null,
      editRow: null
    }
	}

  componentWillUnmount() {
    this.subscriptions.forEach(sub => sub.unsubscribe())
  }

  makeSubscriptions() {
    return [
      hamradio.subscribe(
        'track/modify',
        (name, row) => {
          if (this.state.editTrack && this.state.editTrack.uid in row.tilesets) {
            this.setState({editTrack: row.tilesets[this.state.editTrack.uid]})
          }
        }
      ),
      hamradio.subscribe(
        'track/remove',
        (name, track) => {
          if (track.uid === this.state.editTrack.uid) {
            this.setState({editTrack: null, editRow: null})
          }
        }
      )
    ]
  }

  toggleVisibility = (row, global, focus) => {
    hamradio.publish('track/modify', {...row, global, focus})
  }

  editTrack = (row, track) => {
    this.setState({
      editTrack: track,
      editRow: row
    })
  }

  setOptionValue = (option, value) => {
    const track = _.merge({}, this.state.editTrack, {options: {[option]: value}})
    const row = _.merge({}, this.state.editRow, {tilesets: {[this.state.editTrack.uid]: track}})
    hamradio.publish('track/modify', row)
  }

  pointColorChange = (color) => {
    this.setOptionValue('pointColor', color.hex)
  }

  summaryChange = (item) => {
    this.setOptionValue('summary', item.value)
  }

  trackOverview = () => {
    return (
      <div>
  			<label>Tracks</label>
        {viewconfig.sortTracks(Object.values(this.props.tracks)).map(row => (
          <div key={row.row}>
            <LabelLayout label={`Row ${row.row}`}
              inner=<div>
                <TextButton
                  onClick={() => this.toggleVisibility(row, !row.global, row.focus)}
                  text="Global"
                  backgroundColor={row.global ? 'black' : 'white'}
                  color={row.global ? 'white' : 'grey'}
                />
                <TextButton
                  onClick={() => this.toggleVisibility(row, row.global, !row.focus)}
                  text="Focus"
                  backgroundColor={row.focus ? 'black' : 'white'}
                  color={row.focus ? 'white' : 'grey'}
                />
              </div>
            />
            <ul>
              {Object.values(row.tilesets).map(tileset => (
                <li key={tileset.uid}>
                  <IconButton icon="eye" backgroundColor={tileset.options.pointColor} color="white" onClick={() => this.editTrack(row, tileset)}/>
                  <label>{tileset.name}</label>
                </li>
              ))}
            </ul>
          </div>
        ))}
        <TrackAdd
          servers={this.props.servers}
          row={this.props.tracks.length}
        />
      </div>
		)
  }

  trackEdit = () => {
    return (
      <div>
  			<label>Higlass - Edit Track</label>
        <div>
          <ul>
            <li>{this.state.editTrack.server}</li>
            <li>{this.state.editTrack.name}</li>
          </ul>
          <label>Point Color</label>
          <LabelLayout label="Summary Statistic"
            inner=<div>
              <Selector
                value={{value: this.state.editTrack.options.summary, label: this.state.editTrack.options.summary}}
                onChange={this.summaryChange}
                options={[
                  {value: 'mean', label: 'mean'},
                  {value: 'max', label: 'max'},
                  {value: 'min', label: 'min'},
                ]}
              />
            </div>
          />
          <div className="ColorPicker">
            <CompactPicker color={this.state.editTrack.options.pointColor} onChange={this.pointColorChange}/>
          </div>
          <br/>
          <TextButton onClick={() => this.editTrack(null)} text="Done" />
        </div>
      </div>
    )
  }

	render () {
		return !this.state.editTrack ? this.trackOverview() : this.trackEdit()
	}
}


export default TracksMenu;
