import React from 'react'
import hamradio from 'hamradio'
import {CompactPicker} from 'react-color'
import _ from 'lodash'

import LabelLayout from './basicComponents/LabelLayout'
import FlexRow from './basicComponents/FlexRow'
import Selector from './basicComponents/Selector'
import IconButton from './basicComponents/IconButton'
import TextButton from './basicComponents/TextButton'

import viewconfig from './utils/viewconfig'
import tracks from './utils/tracks'

import './TracksMenu.css'


class TracksMenu extends React.Component {
  constructor (props) {
    super(props);

    this.subscriptions = this.makeSubscriptions()

    this.state = {
      editTrack: null,
      editRow: null,
      editConstant: this.blankConstant()
    }
	}

  componentWillUnmount() {
    this.subscriptions.forEach(sub => sub.unsubscribe())
  }

  makeSubscriptions() {
    return [
      hamradio.subscribe(
        'track/modify',
        (name, row) => {
          if (this.state.editTrack && this.state.editTrack.uid in row.tilesets) {
            this.setState({editTrack: row.tilesets[this.state.editTrack.uid]})
          }
        }
      ),
      hamradio.subscribe(
        'track/remove',
        (name, track) => {
          if (this.state.editTrack && track.uid === this.state.editTrack.uid) {
            this.setState({editTrack: null, editRow: null})
          }
        }
      )
    ]
  }

  trackName = (row, track) => {
    let tilesetName = track.name || track.tilesetUid
    return `Row ${row.row}: ${tilesetName}`
  }

  toggleVisibility = (row, global, focus) => {
    hamradio.publish('track/modify', {...row, global, focus})
  }

  editTrack = (row, track) => {
    this.setState({
      editTrack: _.cloneDeep(track),
      editRow: _.cloneDeep(row)
    })
  }

  setTrackValue = (key, value) => {
    const track = _.merge({}, this.state.editTrack, {[key]: value})
    const row = _.merge({}, this.state.editRow, {tilesets: {[this.state.editTrack.uid]: track}})
    hamradio.publish('track/modify', row)
  }

  setOptionValue = (option, value) => {
    const track = _.merge({}, this.state.editTrack, {options: {[option]: value}})
    const row = _.merge({}, this.state.editRow, {tilesets: {[this.state.editTrack.uid]: track}})
    hamradio.publish('track/modify', row)
  }

  setPrimaryColor = (color) => {
    let options = tracks.options[this.state.editTrack.type]({}, color)
    const track = _.merge({}, this.state.editTrack, {options})
    const row = _.merge({}, this.state.editRow, {tilesets: {[this.state.editTrack.uid]: track}})
    hamradio.publish('track/modify', row)
  }

  blankConstant = () => {
    return {
      color: '#AAAAAA',
      opacity: 0.5,
      label: '',
      labelPosition: 'right',
      labelColor: '#AAAAAA',
      LabelOpacity: 0.5,
      value: 1
    }
  }

  addConstant = () => {
    let options = _.cloneDeep(this.state.editTrack.options)
    if (options.constIndicators) {
      options.constIndicators.push(this.state.editConstant)
    } else {
      options.constIndicators = [this.state.editConstant]
    }
    const track = _.merge({}, this.state.editTrack, {options})
    const row = _.merge({}, this.state.editRow, {tilesets: {[this.state.editTrack.uid]: track}})
    hamradio.publish('track/modify', row)
    this.setState({editConstant: this.blankConstant()})
  }

  removeConstant = (index) => {
    let options = _.cloneDeep(this.state.editTrack.options)
    options.constIndicators.splice(index, 1)
    const track = tracks.merge(this.state.editTrack, {options})
    const row = tracks.merge(this.state.editRow, {tilesets: {[this.state.editTrack.uid]: track}})
    hamradio.publish('track/modify', row)
    this.setState({editConstant: this.blankConstant()})
  }

  changeType = (type) => {
    let primaryColor = tracks.getPrimaryColor(this.state.editTrack)
    let options = tracks.options[type]({}, primaryColor)
    const track = _.merge({}, this.state.editTrack, {type, options})
    const row = _.merge({}, this.state.editRow, {tilesets: {[this.state.editTrack.uid]: track}})
    hamradio.publish('track/remove', {row: this.state.editRow.row, uid: this.state.editTrack.uid})
    hamradio.publish('track/add', row)
  }

  trackOverview = () => {
    return (
      <div>
  			<label>Tracks</label>
        {viewconfig.sortTracks(Object.values(this.props.tracks)).map(row => (
          <div key={row.row}>
            <LabelLayout label={`Row ${row.row}`}
              inner=<div>
                <TextButton
                  onClick={() => this.toggleVisibility(row, !row.global, row.focus)}
                  text="Global"
                  backgroundColor={row.global ? 'black' : 'white'}
                  color={row.global ? 'white' : 'grey'}
                />
                <TextButton
                  onClick={() => this.toggleVisibility(row, row.global, !row.focus)}
                  text="Focus"
                  backgroundColor={row.focus ? 'black' : 'white'}
                  color={row.focus ? 'white' : 'grey'}
                />
              </div>
            />
            <ul>
              {Object.values(row.tilesets).map(tileset => (
                <li key={tileset.uid}>
                  <IconButton icon="eye" backgroundColor={tracks.getPrimaryColor(tileset)} color="white" onClick={() => this.editTrack(row, tileset)}/>
                  <label>{tileset.name}</label>
                </li>
              ))}
            </ul>
          </div>
        ))}
      </div>
		)
  }

  trackTypeEdit = (type) => {
    return (
      <div>
        <label>Primary Color</label>
        <div className="ColorPicker">
          <CompactPicker color={tracks.getPrimaryColor(this.state.editTrack)} onChange={color => this.setPrimaryColor(color.hex)}/>
        </div>
        {type === 'range'
          ? <div>
              <LabelLayout label="Resolution"
                inner=<input type="number" name="resolution" min="1" max="10"
                  value={this.state.editTrack.options.resolution || 1} onChange={e => this.setOptionValue('resolution', e.target.value)}
                />
              />
              <LabelLayout label="Display as"
                inner=<div>
                  <Selector
                    value={{value: this.state.editTrack.options.mode, label: this.state.editTrack.options.mode}}
                    onChange={option => this.setOptionValue('mode', option.value)}
                    options={[
                      {value: 'minMax', label: 'minMax'},
                      {value: 'whisker', label: 'whisker'}
                    ]}
                  />
                </div>
              />
            </div>
          : null
        }
      </div>
    )
  }

  constantBlock = () => {
    return (
      <div>
        <label>Constants</label>
        <ul>
          {this.state.editTrack.options.constIndicators
            ? this.state.editTrack.options.constIndicators.map((ruler, index) => (
              <li key={index}>
                <LabelLayout label={`${ruler.label}: ${ruler.value}`}
                  inner=<IconButton onClick={() => this.removeConstant(index)} icon="minus"/>
                />
              </li>
            ))
            : null
          }
          <li>
            <FlexRow inner={[
              (<label key="llabel">Label:</label>),
              (<input key="ilabel" type="text" name="constant-label" style={{maxWidth:80}}
                value={this.state.editConstant.label} onChange={e => this.setState({editConstant: {...this.state.editConstant, label: e.target.value}})}
              />),
              (<label key="lvalue">Value:</label>),
              (<input key="ivalue" type="number" name="constant-value" style={{maxWidth:80}}
                value={this.state.editConstant.value} onChange={e => this.setState({editConstant: {...this.state.editConstant, value: e.target.value}})}
              />),
              (<IconButton key="accept" onClick={() => this.addConstant()} icon="plus"/>)
            ]}/>
          </li>
        </ul>
      </div>
    )
  }

  trackEdit = () => {
    return (
      <div>
  			<label>Edit {this.trackName(this.state.editRow, this.state.editTrack)}</label>
        <div>
          <LabelLayout label="Track Type"
            inner=<div>
              <Selector
                value={{value: this.state.editTrack.type, label: this.state.editTrack.type}}
                onChange={option => this.changeType(option.value)}
                options={tracks.trackDataTypes[this.state.editTrack.datatype]
                  .concat(this.state.editTrack.filetype === 'bigwig' ? ['range'] : [])
                  .map(type => ({value: type, label: type}))}
              />
            </div>
          />
          {this.trackTypeEdit(this.state.editTrack.type)}
          <br/>
          {this.constantBlock()}
          <br/>
          <TextButton onClick={() => this.editTrack(null, null)} text="Done" />
        </div>
      </div>
    )
  }

	render () {
		return !this.state.editTrack ? this.trackOverview() : this.trackEdit()
	}
}


export default TracksMenu;
